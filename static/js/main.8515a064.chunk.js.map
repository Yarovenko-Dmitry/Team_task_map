{"version":3,"sources":["Components/lazyMap.tsx","Components/ReverseGeocoding.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["LasyMap","latitude","longitude","defaultState","center","zoom","ReverseGeocoding","useState","setLatitude","setLongitude","console","log","type","name","onChange","e","currentTarget","value","placeholder","state","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+NAOaA,EAAU,SAAC,GAAwC,IAAvCC,EAAsC,EAAtCA,SAAUC,EAA4B,EAA5BA,UACjC,OACE,cAAC,IAAD,UACE,oEAEE,cAAC,IAAD,CAAKC,aAAc,CAACC,OAAQ,CAACH,EAAUC,GAAYG,KAAM,WCRpDC,EAAmB,WAAO,IAAD,EAEJC,mBAAS,SAFL,mBAE7BN,EAF6B,KAEnBO,EAFmB,OAGFD,mBAAS,QAHP,mBAG7BL,EAH6B,KAGlBO,EAHkB,KAIpCC,QAAQC,IAAIV,GACZS,QAAQC,IAAIT,GAgBZ,OACE,gEAEE,uBAAOU,KAAM,OACNC,KAAM,qBACNC,SApBqB,SAACC,GAC/BP,GAAaO,EAAEC,cAAcC,OAC7BP,QAAQC,IAAI,YAAYV,IAmBfiB,YAAa,aAEpB,uBAAON,KAAM,OACNC,KAAM,uBACNC,SArBsB,SAACC,GAChCN,GAAcM,EAAEC,cAAcC,OAC9BP,QAAQC,IAAI,aAAaT,IAoBhBgB,YAAa,cAKpB,cAAC,IAAD,UACE,oEAEE,cAAC,IAAD,CAAKC,MAAO,CAACf,OAAQ,CAACH,EAAUC,GAAYG,KAAM,UAGtD,cAAC,EAAD,CAASJ,SAAUA,EAAUC,UAAWA,QC7B/BkB,MAdf,WACE,OACE,sBAAKC,UAAU,MAAf,UACE,cAAC,EAAD,IACA,sDACA,8CACA,gDACA,kDACA,iDCESC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.8515a064.chunk.js","sourcesContent":["import React, {ChangeEvent, useState} from 'react';\r\nimport {Map, YMaps} from 'react-yandex-maps';\r\n\r\ntype LasyMapType = {\r\n  latitude: number\r\n  longitude: number\r\n}\r\nexport const LasyMap = ({latitude, longitude}: LasyMapType) => {\r\n  return (\r\n    <YMaps>\r\n      <div>\r\n        My awesome application with maps!\r\n        <Map defaultState={{center: [latitude, longitude], zoom: 9}}/>\r\n      </div>\r\n    </YMaps>\r\n  )\r\n}","import React, {ChangeEvent, useState} from 'react';\r\nimport {Map, YMaps} from 'react-yandex-maps';\r\nimport {LasyMap} from './lazyMap';\r\n\r\nexport const ReverseGeocoding = () => {\r\n\r\n  const [latitude, setLatitude] = useState(53.9006)\r\n  const [longitude, setLongitude] = useState(27.5590)\r\n  console.log(latitude)\r\n  console.log(longitude)\r\n  const onChangeLatitudeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n    setLatitude(+e.currentTarget.value);\r\n    console.log('latitude ',latitude);\r\n  }\r\n  const onChangeLongitudeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n    setLongitude(+e.currentTarget.value);\r\n    console.log('longitude ',longitude);\r\n  }\r\n\r\n  const onClickShowMapHandler = () => {\r\n\r\n    console.log('onClick ');\r\n  }\r\n\r\n\r\n  return (\r\n    <div>\r\n      export const ReverseGeocoding\r\n      <input type={'text'}\r\n             name={'inputLatitudeValue'}\r\n             onChange={onChangeLatitudeHandler}\r\n             placeholder={'Latitude'}\r\n      />\r\n      <input type={'text'}\r\n             name={'inputeLongitudeValue'}\r\n             onChange={onChangeLongitudeHandler}\r\n             placeholder={'Longitude'}/>\r\n\r\n      {/*<input type={'button'} name={'button'} value={'set object'}/>*/}\r\n      {/*<input type={'button'} name={'button'} value={'find object'}/>*/}\r\n      {/*<input type={'button'} name={'button'} value={'show lasy map'} onClick={onClickShowMapHandler}/>*/}\r\n      <YMaps>\r\n        <div>\r\n          My awesome application with maps!\r\n          <Map state={{center: [latitude, longitude], zoom: 9}}/>\r\n        </div>\r\n      </YMaps>\r\n      <LasyMap latitude={latitude} longitude={longitude}/>\r\n\r\n    </div>\r\n  )\r\n}","import React from 'react';\nimport './App.css';\nimport {ReverseGeocoding} from './Components/ReverseGeocoding';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ReverseGeocoding/>\n      <div>1) Yarovenko-Dmitry</div>\n      <div>2) NetFound</div>\n      <div>3) alex170485</div>\n      <div>4) KhazanAlexey</div>\n      <div>5) Belik85</div>\n\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}