{"version":3,"sources":["api/api.ts","App.tsx","hendlers/apiHendler.ts","reportWebVitals.ts","index.tsx"],"names":["instance","axios","create","baseURL","mainRequest","geocode","get","defaults","params","interceptors","request","use","config","a","apikey","format","error","Promise","reject","App","useState","latitude","setLatitude","longitude","setLongitude","locationName","setLocationName","className","type","name","placeholder","value","onChange","e","currentTarget","onClick","location","then","res","data","response","GeoObjectCollection","featureMember","GeoObject","Point","pos","split","reverse","catch","err","coordinates","length","Number","state","center","zoom","options","position","right","top","left","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a943a440.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nconst instance = axios.create({\r\n  // withCredentials: true,\r\n  baseURL: 'https://geocode-maps.yandex.ru/1.x/',\r\n});\r\n\r\nexport const mainRequest = {\r\n  getObjectCoordinates(geocode: string) {\r\n    return instance.get(`?geocode=${geocode}`);\r\n  }}\r\n\r\naxios.defaults.params = {};\r\nexport const setMobileInterceptors = (instance: any) => {\r\n  instance.interceptors.request.use(\r\n    async (config: any) => {\r\n      const apiKey = '62863b39-ff46-4e0f-a09b-34ed4079f28a'\r\n      const format = 'json'\r\n        config.params = {...config.params, apikey: apiKey, format: format}\r\n      return config;\r\n    },\r\n    (error: any) => Promise.reject(error)\r\n  );\r\n}\r\n\r\nsetMobileInterceptors(instance)","import React, {ChangeEvent, useState} from 'react';\r\nimport './App.css';\r\nimport {Map, RulerControl, TypeSelector, YMaps, ZoomControl} from 'react-yandex-maps';\r\nimport {onClickSearchObjectsHandler} from './hendlers/apiHendler';\r\n\r\n\r\n\r\nfunction App() {\r\n  const [latitude, setLatitude] = useState(50.5000)\r\n  const [longitude, setLongitude] = useState(30.5000)\r\n  const [locationName, setLocationName] = useState('')\r\n\r\n  const onChangeLocationNameHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n    setLocationName(e.currentTarget.value);\r\n  }\r\n\r\n  const handleClickSearchObjectsButton = () => {\r\n    onClickSearchObjectsHandler(locationName).then((coordinates: Array<string>) => {\r\n      if(coordinates.length){\r\n        setLatitude(Number(coordinates[0]));\r\n        setLongitude(+coordinates[1]);\r\n      }\r\n    })\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div className={'searchAddNavigation'}>\r\n        {/* потом может зарефакторим в формик*/}\r\n        <div className={'addObject'}>\r\n          <div>добавить школу</div>\r\n          <div>\r\n            <div>название школы</div>\r\n            <input type={'text'} name={'schoolName'}/>\r\n          </div>\r\n          <div>\r\n            <div>описание</div>\r\n            <input type={'text'} name={'description'}/>\r\n          </div>\r\n          <div>\r\n            <div>координаты</div>\r\n            <input type={'text'} name={'latitudeCoordinate'} placeholder={'Latitude'}/>\r\n            <input type={'text'} name={'longitudeCoordinate'} placeholder={'Longitude'}/>\r\n          </div>\r\n          <input type={'button'} name={'selectCoordinate'} value={'Указать объект на карте'}/>\r\n          <div>\r\n            {/* возможно добавить изображение с видом метки*/}\r\n            <input type={'button'} name={'changeMarkType'} value={'Сменить вид метки'}/>\r\n          </div>\r\n          <input type={'button'} name={'addObject'} value={'Добавить школу'}/>\r\n        </div>\r\n        <div className={'searchObject'}>\r\n          <div>Найти объекты</div>\r\n          <div>\r\n            <div>Местность</div>\r\n            <input type={'text'} name={'location'} placeholder={'Название региона'} onChange={onChangeLocationNameHandler}/>\r\n            <div>\r\n              <div>координаты</div>\r\n              <input type={'text'} name={'latitudeCoordinate'} placeholder={'Latitude'}/>\r\n              <input type={'text'} name={'longitudeCoordinate'} placeholder={'Longitude'}/>\r\n            </div>\r\n          </div>\r\n          <select>\r\n            <option>Школа для детей</option>\r\n            <option>Курсы для взрослых</option>\r\n            <option>IT ВУЗ</option>\r\n          </select>\r\n          <div>\r\n            <div>Количество объектов</div>\r\n            <input type={'number'} name={'objectNumber'}/>\r\n          </div>\r\n          <input type={'button'} name={'searchObjects'} value={'Найти объекты'} onClick={handleClickSearchObjectsButton}/>\r\n        </div>\r\n      </div>\r\n      <div className={'mapArea'}>\r\n        <YMaps>\r\n          <div>\r\n            <Map className={'map'} state={{center: [latitude, longitude], zoom: 10}}>\r\n              <ZoomControl options={{position: {right: 10, top: 10}}}/>\r\n              <TypeSelector options={{position: {left: 10, top: 10}}}/>\r\n              <RulerControl options={{position: {right: 50, top: 10}}}/>\r\n            </Map>\r\n          </div>\r\n        </YMaps>\r\n      </div>\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import {mainRequest} from '../api/api';\r\n\r\n\r\nexport const onClickSearchObjectsHandler = (location: string) => {\r\n  return mainRequest.getObjectCoordinates(location)\r\n    .then(res=>{\r\n      let pos = res.data.response.GeoObjectCollection.featureMember[0].GeoObject.Point.pos\r\n       let coordinats = pos.split(' ').reverse()\r\n  return coordinats\r\n    }\r\n      ).catch(err => {\r\n\r\n  })\r\n}","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}