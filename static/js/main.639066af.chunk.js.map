{"version":3,"sources":["api/api.ts","hendlers/apiHendler.ts","Components/MyMapp.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["addObjInstance","axios","create","baseURL","searchObjInstance","mainRequest","geocode","get","objectType","location","streetName","objectCount","interceptors","request","use","a","config","params","apikey","format","error","Promise","reject","MyMapp","React","memo","props","className","onClick","e","getMapCoordinates","state","center","searchObjectLatitude","searchObjectLongitude","zoom","options","position","right","top","left","displaySearchObjects","map","displaySearchObject","geometry","newSchoolLatitude","newSchoolLongitude","modules","properties","hintContent","schoolName","balloonContent","description","iconLayout","iconImageHref","iconImageSize","iconImageOffset","itMinskSchools","itMinskSchool","schoolDescription","App","useState","setSchoolName","setSchoolDescription","setNewSchoolLatitude","setNewSchoolLongitude","setItMinskSchools","searchObjectLocation","setSearchObjectLocation","searchObjectType","setSearchObjectType","setStreetName","searchObjectCount","setSearchObjectCount","setDisplaySearchObjects","setSearchObjectLatitude","setSearchObjectLongitude","showingAddObjectNavigation","setShowingAddObjectNavigation","addNewItSchoolMinsk","newItSchoolMinsk","id","v1","useCallback","coordinatesSchool","classes","makeStyles","theme","createStyles","root","background","border","borderRadius","boxShadow","color","height","padding","useStyles","Switch","checked","onChange","target","name","TextField","value","currentTarget","label","defaultValue","variant","length","title","replace","Button","type","then","res","data","response","GeoObjectCollection","featureMember","GeoObject","Point","pos","split","reverse","catch","err","coordinates","Number","InputProps","inputProps","min","max","placeholder","Math","round","InputLabelProps","shrink","features","onClickShowNearbyObjectsHeddler","foundObjects","shownObjects","obj","phone","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.639066af.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nconst addObjInstance = axios.create({ \r\n  baseURL: 'https://geocode-maps.yandex.ru/1.x/',\r\n});\r\n\r\nconst searchObjInstance = axios.create({ \r\n  baseURL: 'https://search-maps.yandex.ru/v1/',\r\n});\r\n\r\nexport const mainRequest = {\r\n  getObjectCoordinates(geocode: string) {\r\n    return addObjInstance.get(`?geocode=${geocode}`);\r\n  },\r\n  getDesplayObjects(objectType: string, location: string, streetName: string, objectCount: number) {\r\n    return searchObjInstance.get(`?text=${objectType}, ${location}, ${streetName} &type=biz&lang=ru_RU&results=${objectCount}`);\r\n  }\r\n}\r\n//\r\n// axios.defaults.params = {};\r\nexport const setAddObjInterceptors = (addObjInstance: any) => {\r\n    addObjInstance.interceptors.request.use(\r\n    async (config: any) => {\r\n      const apiKey = '62863b39-ff46-4e0f-a09b-34ed4079f28a'\r\n      const format = 'json'\r\n      config.params = {...config.params, apikey: apiKey, format: format}\r\n      return config;\r\n    },\r\n    (error: any) => Promise.reject(error)\r\n  );\r\n}\r\n\r\nsetAddObjInterceptors(addObjInstance)\r\n\r\nexport const setSearchObjInterceptors = (searchObjInstance: any) => {\r\n    searchObjInstance.interceptors.request.use(\r\n    async (config: any) => {\r\n      const apiKey = '568dafa6-e76b-459f-adab-c4761fc807ed'\r\n      config.params = {...config.params, apikey: apiKey}\r\n      return config;\r\n    },\r\n    (error: any) => Promise.reject(error)\r\n  );\r\n}\r\n\r\nsetSearchObjInterceptors(searchObjInstance)\r\n","import {mainRequest} from '../api/api';\r\n\r\nexport const onClickSearchObjectsHandler = (location: string) => {\r\n  return mainRequest.getObjectCoordinates(location)\r\n    .then(res => {\r\n        const pos = res.data.response.GeoObjectCollection.featureMember[0].GeoObject.Point.pos\r\n        const coordinats = pos.split(' ').reverse()\r\n        return coordinats\r\n      }\r\n    ).catch(err => {\r\n    })\r\n}\r\n\r\nexport const onClickShowNearbyObjectsHeddler = (objectType: string, location: string, streetName: string, objectCount: number) => {\r\n  return mainRequest.getDesplayObjects(objectType, location, streetName, objectCount)\r\n    .then(res => {\r\n        const features = res.data.features\r\n        return features\r\n      }\r\n    ).catch(err => {\r\n    })\r\n}","import {Map, Placemark, RulerControl, TypeSelector, YMaps, ZoomControl} from 'react-yandex-maps';\r\nimport pointer from '../assets/cut-map-marker-final.jpg';\r\nimport React from 'react';\r\nimport {displaySearchObjectType, ItMinskSchoolType} from '../App';\r\n\r\ntype MyMappType = {\r\n  getMapCoordinates: (e: any)=> void\r\n  searchObjectLatitude: number\r\n  searchObjectLongitude: number\r\n  displaySearchObjects: Array<displaySearchObjectType>\r\n  itMinskSchools: Array<ItMinskSchoolType>\r\n}\r\n\r\nexport const MyMapp = React.memo((props: MyMappType) => {\r\n  return (\r\n    <YMaps>\r\n      <div>\r\n        <Map className={'map'}\r\n             onClick={(e: any) => {\r\n               props.getMapCoordinates(e)\r\n             }}\r\n             state={{center: [props.searchObjectLatitude, props.searchObjectLongitude], zoom: 10}}>\r\n          <ZoomControl options={{position: {right: 10, top: 10}}}/>\r\n          <TypeSelector options={{position: {left: 10, top: 10}}}/>\r\n          <RulerControl options={{position: {right: 50, top: 10}}}/>\r\n          {props.displaySearchObjects.map((displaySearchObject: displaySearchObjectType) => <Placemark\r\n              geometry={[displaySearchObject.newSchoolLatitude, displaySearchObject.newSchoolLongitude]}\r\n              modules={['geoObject.addon.balloon', 'geoObject.addon.hint']}\r\n              properties={{\r\n                hintContent: displaySearchObject.schoolName,\r\n                balloonContent: displaySearchObject.description,\r\n              }}\r\n              options={{\r\n                iconLayout: 'default#image',\r\n                iconImageHref: 'https://upload.wikimedia.org/wikipedia/commons/thumb/8/88/Map_marker.svg/667px-Map_marker.svg.png',\r\n                iconImageSize: [40, 50],\r\n                iconImageOffset: [-20, -55],\r\n              }}\r\n            />\r\n          )}\r\n          {props.itMinskSchools.map((itMinskSchool: ItMinskSchoolType) => <Placemark\r\n              geometry={[itMinskSchool.newSchoolLatitude, itMinskSchool.newSchoolLongitude]}\r\n              modules={['geoObject.addon.balloon', 'geoObject.addon.hint']}\r\n              properties={{\r\n                hintContent: itMinskSchool.schoolName,\r\n                balloonContent: itMinskSchool.schoolDescription,\r\n              }}\r\n              options={{\r\n                iconLayout: 'default#image',\r\n                iconImageHref: 'https://cdn.icon-icons.com/icons2/1320/PNG/128/-location_86865.png',\r\n                iconImageSize: [80, 80],\r\n                iconImageOffset: [-40, -55],\r\n              }}\r\n            />\r\n          )}\r\n        </Map>\r\n      </div>\r\n    </YMaps>\r\n  )\r\n})","import React, {ChangeEvent, useCallback, useState} from 'react';\r\nimport './App.css';\r\nimport {onClickSearchObjectsHandler, onClickShowNearbyObjectsHeddler} from './hendlers/apiHendler';\r\nimport {v1} from 'uuid';\r\nimport {MyMapp} from './Components/MyMapp';\r\nimport {Switch} from '@material-ui/core';\r\nimport Button from '@material-ui/core/Button';\r\nimport {makeStyles, createStyles, Theme} from '@material-ui/core/styles';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\n\r\nexport type ItMinskSchoolType = {\r\n    schoolDescription: string,\r\n    id: string,\r\n    schoolName: string,\r\n    newSchoolLatitude: number,\r\n    newSchoolLongitude: number\r\n}\r\n\r\nexport type displaySearchObjectType = {\r\n    description: string,\r\n    id: string,\r\n    schoolName: string,\r\n    newSchoolLatitude: number,\r\n    newSchoolLongitude: number\r\n    phone: any\r\n}\r\n\r\nfunction App() {\r\n    const [schoolName, setSchoolName] = useState<string>('');\r\n    const [schoolDescription, setSchoolDescription] = useState<string>('');\r\n    const [newSchoolLatitude, setNewSchoolLatitude] = useState<any>(0);\r\n    const [newSchoolLongitude, setNewSchoolLongitude] = useState<any>(0);\r\n    const [itMinskSchools, setItMinskSchools] = useState<Array<ItMinskSchoolType>>([]);\r\n\r\n    const [searchObjectLocation, setSearchObjectLocation] = useState<string>('Киев');\r\n    const [searchObjectType, setSearchObjectType] = useState<string>('');\r\n    const [streetName, setStreetName] = useState<string>('');\r\n    const [searchObjectCount, setSearchObjectCount] = useState<number>(1);\r\n    const [displaySearchObjects, setDisplaySearchObjects] = useState<Array<any>>([]);\r\n\r\n    const [searchObjectLatitude, setSearchObjectLatitude] = useState<number>(50.5000);\r\n    const [searchObjectLongitude, setSearchObjectLongitude] = useState<number>(30.5000);\r\n\r\n    const [showingAddObjectNavigation, setShowingAddObjectNavigation] = useState<boolean>(true);\r\n\r\n    const changeToggle = (e: any) => {\r\n        setShowingAddObjectNavigation(e.target.checked)\r\n    };\r\n\r\n    const onChangeSchoolNameHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setSchoolName(e.currentTarget.value);\r\n    }\r\n\r\n    const onChangeDescriptionHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.currentTarget.value.length > 20) {\r\n        }\r\n        setSchoolDescription(e.currentTarget.value)\r\n    }\r\n\r\n    const onChangeNewSchoolLatitudeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        const reg = /[^\\d\\.]/g\r\n        setNewSchoolLatitude(e.currentTarget.value.replace(reg, ''))\r\n    }\r\n\r\n    const onChangeNewSchoolLongitudeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        const reg = /[^\\d\\.]/g\r\n        setNewSchoolLongitude(e.currentTarget.value.replace(reg, ''))\r\n    }\r\n\r\n    const onClickAddSchoolButtonHandler = () => {\r\n        addNewItSchoolMinsk(schoolDescription, schoolName);\r\n        setSearchObjectLatitude(newSchoolLatitude);\r\n        setSearchObjectLongitude(newSchoolLongitude);\r\n        setSchoolName('');\r\n        setSchoolDescription('');\r\n    }\r\n\r\n    const addNewItSchoolMinsk = (schoolDescription: string, schoolName: string) => {\r\n        const newItSchoolMinsk = {\r\n            id: v1(),\r\n            schoolName,\r\n            schoolDescription,\r\n            newSchoolLatitude,\r\n            newSchoolLongitude\r\n        };\r\n        setItMinskSchools([...itMinskSchools, newItSchoolMinsk]);\r\n    }\r\n\r\n    const onChangeLocationNameHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setSearchObjectLocation(e.currentTarget.value);\r\n    }\r\n\r\n    const onClickSearchLocationButtonHeddler = () => {\r\n        onClickSearchObjectsHandler(searchObjectLocation).then((coordinates: Array<string>) => {\r\n            if (coordinates.length) {\r\n                setSearchObjectLatitude(Number(coordinates[0]));\r\n                setSearchObjectLongitude(+coordinates[1]);\r\n            }\r\n        })\r\n    }\r\n\r\n    const onChangeSearchObjectTypeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setSearchObjectType(e.currentTarget.value);\r\n    }\r\n\r\n    const onChangeSearchObjectCountHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setSearchObjectCount(Math.round(+e.currentTarget.value));\r\n    }\r\n\r\n    const onChangeStreetNameHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStreetName(e.currentTarget.value);\r\n    }\r\n\r\n    const onClickShowNearbyObjectsButtonHeddler = () => {\r\n        onClickShowNearbyObjectsHeddler(searchObjectType, searchObjectLocation, streetName, searchObjectCount).then((foundObjects: any[]) => {\r\n            if (foundObjects.length) {\r\n                const shownObjects: Array<displaySearchObjectType> = foundObjects.map((obj: any) => {\r\n                    return {\r\n                        description: obj.properties.description,\r\n                        id: v1(),\r\n                        schoolName: obj.properties.name,\r\n                        newSchoolLatitude: obj.geometry.coordinates[1],\r\n                        newSchoolLongitude: obj.geometry.coordinates[0],\r\n                        phone: 777654\r\n                    }\r\n                })\r\n                setDisplaySearchObjects(shownObjects);\r\n            }\r\n        })\r\n    }\r\n\r\n    const getMapCoordinates = useCallback((e: any) => {\r\n        const coordinatesSchool = e.get('coords');\r\n        setNewSchoolLatitude(+coordinatesSchool[0]);\r\n        setNewSchoolLongitude(+coordinatesSchool[1]);\r\n    }, []);\r\n\r\n    const useStyles = makeStyles((theme: Theme) =>\r\n        createStyles({\r\n            root: {\r\n                background: 'linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)',\r\n                border: 0,\r\n                borderRadius: 5,\r\n                boxShadow: '0 3px 5px 2px rgba(255, 105, 135, .3)',\r\n                color: 'white',\r\n                height: 56,\r\n                padding: '0 30px',\r\n            },\r\n        }));\r\n\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <div className={'navigation'}>\r\n                <div>\r\n                    <p className={'changeMode'}>Сменить режим</p>\r\n                    <Switch\r\n                        checked={showingAddObjectNavigation}\r\n                        onChange={changeToggle}\r\n                        name=\"toggle\"\r\n                    />\r\n                </div>\r\n                {showingAddObjectNavigation\r\n                    ? <div className={'addObjectPanel'}>\r\n                        <div><p>Добавить школу</p></div>\r\n                        <div>\r\n                            <div className={'TextFieldInput'}>\r\n                                <TextField\r\n                                    value={schoolName}\r\n                                    onChange={onChangeSchoolNameHandler}\r\n                                    id=\"outlined-helperText\"\r\n                                    label=\"Название школы\"\r\n                                    defaultValue=\"Default Value\"\r\n                                    variant=\"outlined\"\r\n                                /></div>\r\n                            <div className={'TextFieldInput'}>\r\n                                <TextField\r\n                                    value={schoolDescription}\r\n                                    onChange={onChangeDescriptionHandler}\r\n                                    id=\"outlined-helperText\"\r\n                                    label=\"Описание\"\r\n                                    defaultValue=\"Default Value\"\r\n                                    variant=\"outlined\"\r\n                                /></div>\r\n                        </div>\r\n                        <div>\r\n                            <div><p>Координаты</p></div>\r\n                            <div className={'TextFieldInput'}>\r\n                                <TextField\r\n                                    title={'Широта'}\r\n                                    value={newSchoolLatitude}\r\n                                    onChange={onChangeNewSchoolLatitudeHandler}\r\n                                    defaultValue=\"Default Value\"\r\n                                    variant=\"outlined\"\r\n                                /></div>\r\n                            <div className={'TextFieldInput'}>\r\n                                <TextField\r\n                                    title={'Долгота'}\r\n                                    value={newSchoolLongitude}\r\n                                    onChange={onChangeNewSchoolLongitudeHandler}\r\n                                    defaultValue=\"Default Value\"\r\n                                    variant=\"outlined\"\r\n                                /></div>\r\n                        </div>\r\n                        <Button className={classes.root}\r\n                                variant=\"contained\"\r\n                                type={'button'}\r\n                                name={'addNewItSchoolMinsk'}\r\n                                value={'Добавить на карту'}\r\n                                onClick={onClickAddSchoolButtonHandler}>Добавить на карту</Button>\r\n                    </div>\r\n                    : <div className={'searchObjectPanel'}>\r\n                        <div><p>Найти объект(ы)</p></div>\r\n                        <div>\r\n                            <div className={'TextFieldInput'}>\r\n                                <TextField\r\n                                    value={searchObjectLocation}\r\n                                    onChange={onChangeLocationNameHandler}\r\n                                    id=\"outlined-helperText\"\r\n                                    label=\"Локация\"\r\n                                    defaultValue=\"Default Value\"\r\n                                    variant=\"outlined\"\r\n                                /></div>\r\n                            <Button className={classes.root}\r\n                                    variant=\"contained\"\r\n                                    type={'button'}\r\n                                    name={'searchLocation'}\r\n                                    value={'Показать локацию на карте'}\r\n                                    onClick={onClickSearchLocationButtonHeddler}>Показать локацию на карте</Button>\r\n                        </div>\r\n                        <div>\r\n                            <div><p>Уточнение поиска</p></div>\r\n                            <div className={'TextFieldInput'}>\r\n                                <TextField\r\n                                    value={searchObjectType}\r\n                                    onChange={onChangeSearchObjectTypeHandler}\r\n                                    id=\"outlined-helperText\"\r\n                                    label=\"Тип объекта\"\r\n                                    defaultValue=\"Default Value\"\r\n                                    variant=\"outlined\"\r\n                                /></div>\r\n                            <div className={'TextFieldInput'}>\r\n                                <TextField\r\n                                    value={streetName}\r\n                                    onChange={onChangeStreetNameHandler}\r\n                                    id=\"outlined-helperText\"\r\n                                    label=\"Название улицы\"\r\n                                    defaultValue=\"Default Value\"\r\n                                    variant=\"outlined\"\r\n                                /></div>\r\n                            <div className={'TextFieldInput'}>\r\n                                <TextField\r\n                                    name={'objectCount'}\r\n                                    value={searchObjectCount}\r\n                                    InputProps={{inputProps: {min: 1, max: 20}}}\r\n                                    title={'Сколько максимально вывести объектов от 1 до 20'}\r\n                                    placeholder={'мах кол-во'}\r\n                                    onChange={onChangeSearchObjectCountHandler}\r\n                                    id=\"outlined-number\"\r\n                                    type=\"number\"\r\n                                    InputLabelProps={{\r\n                                        shrink: true,\r\n                                    }}\r\n                                    variant=\"outlined\"\r\n                                /></div>\r\n                        </div>\r\n                        <div className={'displaySearchObjectsBox'}>\r\n                            <div>Объектов найдено :</div>\r\n                            {displaySearchObjects.length} </div>\r\n                        <Button className={classes.root}\r\n                                variant=\"contained\"\r\n                                type={'button'}\r\n                                name={'showNearbyObjects'}\r\n                                value={'Показать объект(ы) на карте'}\r\n                                onClick={onClickShowNearbyObjectsButtonHeddler}>Показать объект(ы) на карте</Button>\r\n\r\n                    </div>}\r\n            </div>\r\n            <div className={'mapArea'}>\r\n                <MyMapp getMapCoordinates={getMapCoordinates}\r\n                        searchObjectLatitude={searchObjectLatitude}\r\n                        searchObjectLongitude={searchObjectLongitude}\r\n                        displaySearchObjects={displaySearchObjects}\r\n                        itMinskSchools={itMinskSchools}/>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);  \r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n}\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>\r\n\r\n        , document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}